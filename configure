#!/bin/sh
### Custom configure script of Dinit.
# For compatability you don't need to use autotools.
# Do you disagree? I show you!
# Thanks Skarnet.org (Laurent Baracot ?) for s6's configure script. That's "my source of inspiration" to make this.

## Initial prepartion
cd $(dirname "$0")
. build/version.conf

## Helper funcations
# I suggest do not comment this thing but if your system
# is don't have `printf` you need to comment this thing.
# See http://www.etalabs.net/sh_tricks.html
echo() {
    IFS=" "
    printf %s\\n "$*"
}

info() {
    echo "Info: $*"
}

sub_info() {
    echo "  ... $*"
}

error() {
    echo "Error: $*"
    exit 1
}

sub_error() {
    echo "  ... Error: $*"
    exit 1
}

findcxx() {
    info Checking C++ Compiler...
    if test "$CXX" ; then
        sub_info "$CXX" is user/system prefered C++ compiler.
        compiler="$CXX"
    else
        for guess in c++ g++ clang++ ""; do
            if test -z "$guess"; then
                break # None found
            fi
            type "$guess" > /dev/null
            if test $? = 0; then
                compiler="$guess"
                sub_info "$compiler"
                break # Found
            fi
        done
    fi
    if test -z "$compiler"; then
       sub_error No C++ compiler found!
    fi
}

cxx_works() {
    info Checking C++ compiler works...
    echo "#include <iostream>" > test.cc
    echo "int main(int argc, char **argv) { return 0; }" >> test.cc
    $compiler -o test test.cc
    if [ $? != 0 ]; then
        rm -f test*
        sub_error Seems like C++ compiler is not working!
    else
        rm -f test
        sub_info Yes.
    fi
}

find_program() {
    info Checking "$1" is executable...
    type "$1" > /dev/null 2>&1
    if [ $? = 0 ]; then
        sub_info Yes.
    else
        sub_error "$1" is not executable/exist!
        exit 1
    fi
}

try_cxx_argument() {
    info Checking compiler supports $1...
    if [ "$PLATFORM" = "FreeBSD" ]; then
        if [ "$1" = "-flto" ]; then
            sub_info Skipped. because "$1" is not recommended on "$PLATFORM".
            return 0
        fi
    elif [ "$PLATFORM" = "Darwin" ]; then
        if [ "$1" = "-fno-rtti" ]; then
            sub_info Skipped. because "$1" is not recommended on "$PLATFORM".
            return 0
        fi
    fi
    if $compiler -c $CXXOPTS $CUSTOM_CXXOPTS $1 test.cc -o test > /dev/null 2>&1 ; then
        sub_info Yes.
        CXXOPTS="$CXXOPTS $1"
    else
        if [ "$1" = "-std=c++11" ]; then
            sub_error "Seems like C++ compiler don't support "$1" but It's required!"
            exit 1
        else
            sub_info No.
        fi
    fi
}

try_ld_argument() {
    info Checking Linker supports $1...
    if [ "$PLATFORM" = "FreeBSD" ]; then
        if [ "$1" = "-fsanitize=address,undefined" ]; then
            sub_info Skipped. because "$1" is not recommended on "$PLATFORM".
            return 0
        fi
    fi
    if $compiler $CXXOPTS $CUSTOM_CXXOPTS $1 test.cc -o test > /dev/null 2>&1 ; then
        sub_info Yes.
        SANITIZEROPTS="$1"
    else
        sub_info No.
    fi
}

usage() {
    cat << EOF
Usage: $0 [OPTION]...

Defaults for the options are specified in brackets.

  --help                        This help message.
  --quiet                       Don't print normal message, just errors.
  --clean                       Clear mconfig and configure's temp files.

Installation directories:
  --sbindir=SBINDIR             Dinit executables [/sbin]
  --mandir=MANDIR               Dinit man-pages location [/usr/share/man]
  --syscontrolsocket=SOCKETPATH Dinitctl socket location [/run/dinitctl]

Optional options:
  --shutdown-prefix=PREFIX      Name prefix for shutdown, poweroff, reboot, halt programs []
  --enable-shutdown             Build shutdown, poweroff, reboot, halt programs [Enabled on Linux based systems]
  --disable-shutdown            Don't build shutdown, poweroff, reboot, halt programs
  --enable-cgroups              Enable Cgroups support [Enabled only on Linux based systems]
  --disable-cgroups             Disable Cgroups support
  --enable-sanitizers           Enable -fsanitize in Unit tests [Enabled on supported systems]
  --disable-sanitizers          Disable -fsanitize in Unit tests

Environment variables can be used:
  CXX                           If you wanna use specifice C++ compiler.
  CUSTOM_CXXOPTS                If you wanna use some arguments in C++ compiler command line.
                                  Note: You don't need to set required flags for Building Dinit!
                                  such as -std=c++11
  CUSTOM_LDFLAGS                If you wanna use some arguments in Linker command line.

See BUILD file for more information.

EOF
    exit 0
}

## General Defines
#PLATFORM="$(uname)"
PLATFORM="$(uname)"
CXXOPTS=""
if [ "$PLATFORM" = "FreeBSD" ]; then
    LDFLAGS="-lrt"
fi
SBINDIR="/sbin"
MANDIR="/usr/share/man/"
SYSCONTROLSOCKET="/run/dinitctl"
SANITIZEROPTS=""
NO_SANITIZERS="auto"
SHUTDOWN_PREFIX=""
if [ "$PLATFORM" = "Linux" ]; then
    BUILD_SHUTDOWN=yes
    SUPPORT_CGROUPS=1
else
    BUILD_SHUTDOWN=no
    SUPPORT_CGROUPS=0
fi

## Flag praser
for arg in "$@"; do
    case "$arg" in
        --help) usage ;;
        --quiet) info() { true; } && sub_info() { true; } ;;
        --clean) rm -f test* & rm -f mconfig && exit 0 ;;
        --sbindir=*) SBINDIR="${arg#*=}" && shift ;;
        --mandir=*) MANDIR="${arg#*=}" && shift ;;
        --syscontrolsocket=*) SYSCONTROLSOCKET="${arg#*=}" && shift ;;
        --shutdown-prefix=*) SHUTDOWN_PREFIX="${arg#*=}" && shift ;;
        --enable-shutdown) BUILD_SHUTDOWN=yes ;;
        --disable-shutdown) BUILD_SHUTDOWN=no ;;
        --enable-cgroups) SUPPORT_CGROUPS=1 ;;
        --disable-cgroups) SUPPORT_CGROUPS=0 ;;
        --enable-sanitizers) NO_SANITIZERS=0 ;;
        --disable-sanitizers) NO_SANITIZERS=1 ;;
        --cxx-check) findcxx && cxx_works && exit 0 ;;
        -*) echo Warning: Unknown argument: "$arg" ;;
        *) continue ;;
    esac
done

## Find and test C++ compiler
findcxx
cxx_works

## Find depends
for depend in make m4; do
    find_program $depend
done

## Test compiler/linker supported argument
for argument in -std=c++11 \
                -Wall \
                -flto \
                -not-exist \
                -fno-rtti \
                -fno-plt; do
    try_cxx_argument $argument
done
if [ "$NO_SANITIZERS" = "auto" ]; then
    for ld_argument in -fsanitize=address,undefined; do
        try_ld_argument $ld_argument
    done
elif [ "$NO_SANITIZERS" = "0" ]; then
    SANITIZEROPTS="-fsanitize=address,undefined"
fi

## Create mconfig
rm -f test*
info Generating $(dirname $0)/mconfig...
cat << EOF > $(dirname $0)/mconfig
## Generated by "$0" for "$PLATFORM"
# Installation path options.

SBINDIR=$SBINDIR
MANDIR=$MANDIR
SYSCONTROLSOCKET=$SYSCONTROLSOCKET

# General build options.

# Linux (GCC): Note with GCC 5.x/6.x you must use the old ABI, with GCC 7.x you must use
# the new ABI. See BUILD file for more information.
# MacOS: Cannot use -fno-rtti: apparently prevents exception handling from working properly.
# FreeBSD: Cannot use LTO with default linker.

CXX=$compiler
CXXOPTS=$CXXOPTS
CUSTOM_CXXOPTS=$CUSTOM_CXXOPTS
LDFLAGS=$LDFLAGS
CUSTOM_LDFLAGS=$CUSTOM_LDFLAGS
BUILD_SHUTDOWN=$BUILD_SHUTDOWN
SANITIZEOPTS=$SANITIZEROPTS

# Notes:
#   -D_GLIBCXX_USE_CXX11_ABI=1 : force use of new ABI, see above / BUILD
#   -fno-rtti (optional) : Dinit does not require C++ Run-time Type Information
#   -fno-plt  (optional) : Recommended optimisation
#   -flto     (optional) : Perform link-time optimisation
#   -fsanitize=address,undefined :  Apply sanitizers (during unit tests)

# Feature settings
SUPPORT_CGROUPS=$SUPPORT_CGROUPS

# Optional settings
SHUTDOWN_PREFIX=$SHUTDOWN_PREFIX
EOF
sub_info done.
info Done!
exit 0
