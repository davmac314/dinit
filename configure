#!/bin/sh
### Custom configure script of Dinit.

## Initial prepartion
cd "$(dirname "$0")" || exit 1
. build/version.conf

## Helper funcations
# I suggest do not comment this thing but if your system
# is don't have `printf` you need to comment this thing.
# See http://www.etalabs.net/sh_tricks.html
echo() {
    IFS=" "
    printf %s\\n "$*"
}

info() {
    echo "Info: $*"
}

sub_info() {
    echo "  ... $*"
}

error() {
    echo "Error: $*"
    exit 1
}

sub_error() {
    echo "  ... Error: $*"
    exit 1
}

warning() {
    echo
    echo "Warning: $*"
}

sub_warning() {
    echo "  ... $*"
    echo
}

create_testfile_cc() {
    echo "int main(int argc, char **argv) { return 0; }" > testfile.cc
}

findcxx() {
    type "$1" > /dev/null 2>&1
    if test $? = 0; then
        if [ "$2" = "host" ]; then
            hostcompiler="$1"
        else
            compiler="$1"
        fi
    fi
}

cxx_works() {
    info Checking C++ compiler works...
    $compiler -o testfile.o testfile.cc
    if [ $? != 0 ]; then
        rm -f testfile*
        sub_error Seems like C++ compiler is not working!
    else
        rm -f testfile
        sub_info Yes.
    fi
}

find_program() {
    if [ -x $(command -v "$1") ]; then
        sub_info Yes.
    else
        sub_error "$1" is not executable/exist!
    fi
}

try_cxx_argument() {
    info Checking whatever compiler accpets $2...
    if $compiler -c $CPPFLAGS $CXXOPTS $2 $CUSTOM_CXXOPTS testfile.cc -o testfile.o > /dev/null 2>&1 ; then
        rm testfile.o
        sub_info Yes.
        eval "$1=\"\${$1} \$2\""
        eval "$1=\${$1# }"
    else
        if [ "$2" = "-std=c++11" ]; then
            sub_error "Seems like C++ compiler don't support $2 but It's required!"
        else
            sub_info No.
        fi
    fi
}

try_ld_argument() {
    info Checking whatever linker accepts $2...
    if $compiler $CPPFLAGS $CXXOPTS $CUSTOM_CXXOPTS $2 testfile.cc -o testfile.o > /dev/null 2>&1 ; then
        sub_info Yes.
        eval "$1=\"\${$1} \$2\""
        eval "$1=\${$1# }"
    else
        sub_info No.
    fi
}

usage() {
    cat << EOF
Usage: $0 [OPTION]...

Defaults for the options are specified in brackets.

  --help                        This help message.
  --quiet                       Don't print normal messages, just errors.
  --clean                       Clear mconfig and configure's temp files.

Target options:
  --target                      Set the target system (for cross-compiling) []
  --host                        Same as --target
  --platform                    Set the platform manually (Just for cross-platform cross-compile!) [autodetected]
                                  For all cross-compiles (even this) don't forget to set correct --target!

Installation directories:
  --prefix=PREFIX               Main installtion prefix [/usr]
  --exec-prefix=EPREFIX         Main executables location [/]
  --sbindir=SBINDIR             Dinit executables [EPREFIX/sbin]
  --mandir=MANDIR               Dinit man-pages location [PREFIX/share/man]
  --syscontrolsocket=SOCKETPATH Dinitctl socket location [/run/dinitctl]

Optional options:
  --shutdown-prefix=PREFIX      Name prefix for shutdown, poweroff, reboot, halt programs []
  --enable-shutdown             Build shutdown, poweroff, reboot, halt programs [Enabled on Linux based systems]
  --disable-shutdown            Don't build shutdown, poweroff, reboot, halt programs
  --enable-cgroups              Enable Cgroups support [Enabled only on Linux based systems]
  --disable-cgroups             Disable Cgroups support
  --enable-sanitizers           Enable -fsanitize in Unit tests [Enabled on supported systems]
  --disable-sanitizers          Disable -fsanitize in Unit tests
  --enable-utmpx                Enable manipulating the utmp/utmpx database via the related POSIX functions [auto]
  --disable-utmpx               Disable manipulating the utmp/utmpx database via the related POSIX functions
  --disable-cxxopts             (Not recommanded) Disable ALL CXXOPTS even -std=c++11
                                  Don't forget set your flags via CXXOPTS & CXXFLAGS envs otherwise
                                  build may be failed!
  --disable-ldflags             (Not recommanded) Disable ALL LDFLAGS even "-lrt on FreeBSD"
                                  You can use LDFLAGS and CUSTOM_LDFLAGS envs to set your ld flags.

Environment variables can be used:
  CXX                           If you wanna use specific C++ compiler.
  CPPFLAGS                      If you wanna use some arguments in C++ compiler command line.
                                  It's passed before $(CXXOPTS)
  CXXFLAGS                      If you wanna use some arguments in C++ compiler command line.
                                  It's passed after $(CXXOPTS)
                                  Note: You don't need to set required flags for Building Dinit!
                                  such as -std=c++11 (if you don't use --disable-cxx-flags of course)
  CUSTOM_LDFLAGS                If you wanna use some arguments in Linker command line.
                                  It's passed after $(LDFLAGS)

See BUILD file for more information.
EOF
    exit 0
}

## General Defines
PLATFORM=$(uname)
PREFIX="/usr"
EPREFIX="/"
SBINDIR="$EPREFIX/sbin"
MANDIR="$PREFIX/share/man/"
SYSCONTROLSOCKET="/run/dinitctl"
NO_SANITIZERS="auto"
SHUTDOWN_PREFIX=""
if [ "$PLATFORM" = "Linux" ]; then
    BUILD_SHUTDOWN=yes
    SUPPORT_CGROUPS=1
else
    BUILD_SHUTDOWN=no
    SUPPORT_CGROUPS=0
fi

## Flag praser
for arg in "$@"; do
    case "$arg" in
        --help) usage ;;
        --quiet) info() { true; } && sub_info() { true; } && warning() { true; } && sub_warning() { true; };;
        --clean) rm -f test* & rm -f mconfig && exit 0 ;;
        --platform=*) PLATFORM="${arg#*=}" && shift ;;
        --prefix=*) PREFIX="${arg#*=}" && MANDIR="$PREFIX/share/man/" && shift ;;
        --exec-prefix=*) EPREFIX="${arg#*=}" && SBINDIR="$EPREFIX/sbin" && shift;;
        --sbindir=*) SBINDIR="$EPREFIX/${arg#*=}" && shift ;;
        --mandir=*) MANDIR="$PREFIX${arg#*=}" && shift ;;
        --syscontrolsocket=*) SYSCONTROLSOCKET="${arg#*=}" && shift ;;
        --shutdown-prefix=*) SHUTDOWN_PREFIX="${arg#*=}" && shift ;;
        --build=*) BUILD="${arg#*=}" ;;
        --target=*|--host=*) TARGET="${arg#*=}" ;;
        --enable-shutdown) BUILD_SHUTDOWN=yes ;;
        --disable-shutdown) BUILD_SHUTDOWN=no ;;
        --enable-cgroups) SUPPORT_CGROUPS=1 ;;
        --disable-cgroups) SUPPORT_CGROUPS=0 ;;
        --enable-sanitizers) NO_SANITIZERS=0 ;;
        --disable-sanitizers) NO_SANITIZERS=1 ;;
        --enable-utmpx) USE_UTMPX=1 ;;
        --disable-utmpx) USE_UTMPX=0 ;;
        --disable-cxxopts) NO_CXXOPTS=true ;;
        --disable-ldflags) NO_LDFLAGS=true ;;
        -*) warning Unknown argument: "$arg" ;;
        *) continue ;;
    esac
done

## Create testfile.cc to test c++ compiler
create_testfile_cc

## Find and test C++ compiler
info Checking C++ Compiler...
if test -n "$CXX" ; then
    sub_info "$CXX" is user/system prefered C++ compiler.
    compiler="$CXX"
elif test -n "$TARGET"; then
    for guess in "$TARGET"-g++ "$TARGET"-clang++ "$TARGET"-c++; do
        findcxx "$guess"
        if test -n "$compiler"; then
            sub_info "$compiler"
            break # Found
        fi
    done
    info Checking Host C++ Compiler...
    if test -n "$BUILD"; then
        for guess in "$BUILD"-g++ "$BUILD"-clang++ "$BUILD"-c++; do
            findcxx "$guess" host
            if test -n "$hostcompiler"; then
                sub_info "$hostcompiler"
                break # Found
            fi
        done
    else
        for guess in g++ clang++ c++; do
        findcxx "$guess" host
        if test -n "$hostcompiler"; then
            sub_info "$hostcompiler"
            break # Found
        fi
        done
    fi
    if test -z "$compiler" || test -z "$hostcompiler"; then
       sub_error No C++ compiler found! # Not found
    fi
else
    for guess in g++ clang++ c++; do
        findcxx "$guess"
        if test -n "$compiler"; then
            sub_info "$compiler"
            break # Found
        fi
    done
    if test -z "$compiler"; then
       sub_error No C++ compiler found! # Not found
    fi
fi
cxx_works

## Verify PLATFORM value
if [ "$PLATFORM" != "Linux" ] && [ "$PLATFORM" != "FreeBSD" ] && \
[ "$PLATFORM" != "OpenBSD" ] && [ "$PLATFORM" != "Darwin" ]; then
    warning "$PLATFORM" platform is unknown!
    sub_warning Valid Platforms are: Linux, FreeBSD, OpenBSD, Darwin
fi

## Find depends
for depend in gmake m4 install; do
    info Checking "$depend" is executable...
    find_program $depend
done

## Test compiler/linker supported arguments
if test -z $NO_CXXOPTS; then
    for argument in -std=c++11 \
                    -Wall \
                    -Os \
                    -fno-plt
    do
        try_cxx_argument CXXOPTS $argument
    done
    if [ "$PLATFORM" != "FreeBSD" ]; then
        try_cxx_argument CXXOPTS -flto
    fi
    if [ "$PLATFORM" != "Darwin" ]; then
        try_cxx_argument CXXOPTS -fno-rtti
    fi
fi
if [ "$PLATFORM" = "FreeBSD" ] && test -z $NO_LDFLAGS; then
    try_ld_argument LDFLAGS -lrt
fi
if [ "$NO_SANITIZERS" = "auto" ]; then
    try_ld_argument SANITIZEROPTS -fsanitize=address,undefined
elif [ "$NO_SANITIZERS" = "0" ]; then
    SANITIZEROPTS="-fsanitize=address,undefined"
fi

## Create mconfig
rm -f testfile*
info Creating mconfig...
cat << EOF > mconfig
## Auto-generated by "$0" for "$PLATFORM"
# Installation path options.

SBINDIR=$SBINDIR
MANDIR=$MANDIR
SYSCONTROLSOCKET=$SYSCONTROLSOCKET

# General build options.

# Linux (GCC): Note with GCC 5.x/6.x you must use the old ABI, with GCC 7.x you must use
# the new ABI. See BUILD file for more information.
# MacOS: Cannot use -fno-rtti: apparently prevents exception handling from working properly.
# FreeBSD: Cannot use LTO with default linker.

CXX=$compiler
CPPFLAGS=$CPPFLAGS
CXXOPTS=$CXXOPTS
CXXFLAGS=$CXXFLAGS
LDFLAGS=$LDFLAGS
CUSTOM_LDFLAGS=$CUSTOM_LDFLAGS
BUILD_SHUTDOWN=$BUILD_SHUTDOWN
SANITIZEOPTS=$SANITIZEROPTS

# Notes:
#   -D_GLIBCXX_USE_CXX11_ABI=1 : force use of new ABI, see above / BUILD
#   -fno-rtti (optional) : Dinit does not require C++ Run-time Type Information
#   -fno-plt  (optional) : Recommended optimisation
#   -flto     (optional) : Perform link-time optimisation
#   -fsanitize=address,undefined :  Apply sanitizers (during unit tests)

# Feature settings
SUPPORT_CGROUPS=$SUPPORT_CGROUPS

# Optional settings
SHUTDOWN_PREFIX=$SHUTDOWN_PREFIX
EOF
if test $USE_UTMPX; then
    echo "USE_UTMPX=$USE_UTMPX" >> mconfig
fi
if test $hostcompiler; then
    echo "# For cross-compile" >> mconfig
    echo "HOSTCXX=$hostcompiler" >> mconfig
fi
sub_info done.
info Done!
exit 0
